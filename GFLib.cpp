
#include "GFLib.h"
#include "GF2Extension.h"
#include "SubField.h"
#include <memory>
///////////////////////////////////////////////////////////////////////////////
int main(int argc, char* argv[])
{
	_CrtSetDbgFlag(_CRTDBG_ALLOC_MEM_DF | _CRTDBG_LEAK_CHECK_DF);
	TestConvert();
	
/*	{
		GF2Extension ext(7);
		ext.testClass();

		cout << "GF(4) with poly " << ext.format(ext.poly()) << "\n";
		cout << ext.makeMultiplicationTable();
	}
	*/
	{
		GF2Extension ext(31);
		ext.testClass();

		cout << "GF("<< ext.size() << ") with poly " << ext.format(ext.poly()) << "\n";
		cout << ext.makeMultiplicationTable();
		cout << ext.makeGeneratorList();
		cout << ext.makeGaloisData();

		cout << "Subfields generated by a single generator:\n";
		vector<unique_ptr<Subfield>> afields;
		for (uint i = 1; i < ext.size(); i++)
		{
			Subfield *psf = new Subfield(&ext);
			psf->addElement(i);
			psf->generateField();

			bool found = false;
			for (size_t j = 0; j < afields.size(); j++)
			{
				if (afields[j]->isIdentical(psf))
				{ 
					found = true;
					break;
				}
			}
			if (!found)
				afields.emplace_back(psf);
			else
				delete psf;

		}

		for (size_t j = 0; j < afields.size(); j++)
		{
			afields[j]->dump();

		}
	}


	return 0;
}

